/*
 * rhsso
 * rhsso
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tsystems.tm.acc.wiremock.oauth.client.api;

import com.google.gson.reflect.TypeToken;
import com.tsystems.tm.acc.wiremock.oauth.client.model.Token;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.POST;

@Api(value = "Rhsso")
public class RhssoApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private RhssoApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static RhssoApi rhsso(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new RhssoApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if (reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                token()
        );
    }

    @ApiOperation(value = "Get a security token",
            notes = "",
            nickname = "token",
            tags = {"rhsso"})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 403, message = "Not Authrized")})
    public TokenOper token() {
        return new TokenOper(createReqSpec());
    }

    /**
     * Customize request specification
     *
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public RhssoApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Get a security token
     *
     * @see #grantTypeForm grant_type (required)
     * @see #usernameForm username (optional)
     * @see #passwordForm password (optional)
     * @see #clientIdForm client_id (optional)
     * @see #codeForm code (optional)
     * @see #redirectUriForm redirect_uri (optional)
     * @see #clientSecretForm client_secret (optional)
     * @see #scopeForm scope (optional)
     * return Token
     */
    public static class TokenOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/token";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public TokenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/x-www-form-urlencoded");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /token
         *
         * @param handler handler
         * @param <T>     type
         * @return type
         */
        @Override
        public <T> T execute(Function<io.restassured.response.Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /token
         *
         * @param handler handler
         * @return Token
         */
        public Token executeAs(Function<io.restassured.response.Response, io.restassured.response.Response> handler) {
            Type type = new TypeToken<Token>() {
            }.getType();
            return execute(handler).as(type);
        }

        public static final String USERNAME_FORM = "username";

        /**
         * @param username (String) username (optional)
         * @return operation
         */
        public TokenOper usernameForm(Object... username) {
            reqSpec.addFormParam(USERNAME_FORM, username);
            return this;
        }

        public static final String PASSWORD_FORM = "password";

        /**
         * @param password (String) password (optional)
         * @return operation
         */
        public TokenOper passwordForm(Object... password) {
            reqSpec.addFormParam(PASSWORD_FORM, password);
            return this;
        }

        public static final String CLIENT_ID_FORM = "client_id";

        /**
         * @param clientId (String) client_id (optional)
         * @return operation
         */
        public TokenOper clientIdForm(Object... clientId) {
            reqSpec.addFormParam(CLIENT_ID_FORM, clientId);
            return this;
        }

        public static final String CODE_FORM = "code";

        /**
         * @param code (String) code (optional)
         * @return operation
         */
        public TokenOper codeForm(Object... code) {
            reqSpec.addFormParam(CODE_FORM, code);
            return this;
        }

        public static final String REDIRECT_URI_FORM = "redirect_uri";

        /**
         * @param redirectUri (String) redirect_uri (optional)
         * @return operation
         */
        public TokenOper redirectUriForm(Object... redirectUri) {
            reqSpec.addFormParam(REDIRECT_URI_FORM, redirectUri);
            return this;
        }

        public static final String CLIENT_SECRET_FORM = "client_secret";

        /**
         * @param clientSecret (String) client_secret (optional)
         * @return operation
         */
        public TokenOper clientSecretForm(Object... clientSecret) {
            reqSpec.addFormParam(CLIENT_SECRET_FORM, clientSecret);
            return this;
        }

        public static final String SCOPE_FORM = "scope";

        /**
         * @param scope (String) scope (optional)
         * @return operation
         */
        public TokenOper scopeForm(Object... scope) {
            reqSpec.addFormParam(SCOPE_FORM, scope);
            return this;
        }

        public static final String GRANT_TYPE_FORM = "grant_type";

        /**
         * @param grantType (String) grant_type (required)
         * @return operation
         */
        public TokenOper grantTypeForm(Object... grantType) {
            reqSpec.addFormParam(GRANT_TYPE_FORM, grantType);
            return this;
        }

        /**
         * Customize request specification
         *
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public TokenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         *
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public TokenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
