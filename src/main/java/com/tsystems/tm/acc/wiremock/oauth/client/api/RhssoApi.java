/*
 * rhsso
 * rhsso
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.tsystems.tm.acc.wiremock.oauth.client.api;

import com.google.gson.reflect.TypeToken;
import com.tsystems.tm.acc.wiremock.oauth.client.model.Token;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;

import static io.restassured.http.Method.POST;

public class RhssoApi {

    private RequestSpecBuilder reqSpec;

    private RhssoApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static RhssoApi rhsso(RequestSpecBuilder reqSpec) {
        return new RhssoApi(reqSpec);
    }


    public TokenOper token() {
        return new TokenOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public RhssoApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Get a security token
     * 
     *
     * @see #grantTypeForm grant_type (required)
     * @see #clientIdForm client_id (optional)
     * @see #codeForm code (optional)
     * @see #redirectUriForm redirect_uri (optional)
     * @see #clientSecretForm client_secret (optional)
     * @see #scopeForm scope (optional)
     * return Token
     */
    public class TokenOper {

        public static final String REQ_URI = "/token";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public TokenOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/x-www-form-urlencoded");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public TokenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/x-www-form-urlencoded");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /token
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        /**
         * POST /token
         * @return Token
         */
        public Token executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Token>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param clientId (String) client_id (optional)
         */
         public TokenOper clientIdForm(Object... clientId) {
            reqSpec.addFormParam("client_id", clientId);
            return this;
         }

         /**
         * @param code (String) code (optional)
         */
         public TokenOper codeForm(Object... code) {
            reqSpec.addFormParam("code", code);
            return this;
         }

         /**
         * @param redirectUri (String) redirect_uri (optional)
         */
         public TokenOper redirectUriForm(Object... redirectUri) {
            reqSpec.addFormParam("redirect_uri", redirectUri);
            return this;
         }

         /**
         * @param clientSecret (String) client_secret (optional)
         */
         public TokenOper clientSecretForm(Object... clientSecret) {
            reqSpec.addFormParam("client_secret", clientSecret);
            return this;
         }

         /**
         * @param scope (String) scope (optional)
         */
         public TokenOper scopeForm(Object... scope) {
            reqSpec.addFormParam("scope", scope);
            return this;
         }

         /**
         * @param grantType (String) grant_type (required)
         */
         public TokenOper grantTypeForm(Object... grantType) {
            reqSpec.addFormParam("grant_type", grantType);
            return this;
         }

        /**
         * Customise request specification
         */
        public TokenOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public TokenOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}